# Introduction to APIs

Application Programming Interfaces (APIs) are how applications on the web communicate - they allow users (or other applications) to submit and retrieve data using a structured set of endpoints. 

APIs may be intended for private use, e.g.: the back end of an application, or public use: e.g.: dissemination of open data.

APIs allow websites to interact and communicate

There are different kinds of APIs. REST is the most common, but SOAP and GraphQL may also be encountered.

## GET requests

```{css, echo=FALSE}
.reveal code {
  max-height: 100% !important;
}
```

::::{.columns}
:::{.column width="50%"}
Most API requests are simple GET operations

These send a request to a specific URL endpoint (/api in the example)

They can include query parameters as part of the URL

The server will send back a response, usually in JSON format

This will include a response code indicating if the request succeeded:

| Code | Meaning |
|------|---------|
| 200  | OK      |
| 400  | Bad Request |
| 401  | Unauthorized |
| 403  | Forbidden |
| 404  | Not Found |
| 500  | Internal Server Error |

:::
:::{.column width="50%"}
```python
import requests

response = requests.get(
    'http://www.example.com/api',
    params={x: 5}
    )

if response.status_code == 200:
    print(response.json())
else:
    print(response.status_code)
```
<!-- ```R
library(httr)
library(jsonlite)

response <- GET(
    url = "http://www.example.com/api",
    query = list(x = 5)
)

if (status_code(response) == 200) {
    data = fromJSON(rawToChar(res$content))
    print(data)
} else {
    print(status_code(response))
}
``` -->
```
curl http://www.example.com/api?x=5
```

:::
::::


## POST requests

::::{.columns}
:::{.column width="50%"}
POST endpoints allow you to send more data to the server

This could be json data, or a file

API endpoints only support specific request types

POST requests are often used for submitting data to the server (e.g.: to store it in a database). They may also be used for requesting data with more complex input
:::
:::{.column width="50%"}
```python
#| code-overflow: wrap
import requests

data = {
    'name': 'John Doe',
    'age': 30,
    'email': 'johndoe@example.com'
}

files={ 
    'upload_file': open('file.txt', 'rb') 
}

response = requests.post(
    'http://www.example.com/api',
    json=data,
    files=files
)

if response.status_code == 200:
    print(response.json())
else:
    print(response.status_code)
```
:::
::::

## Authentication

::::{.columns}
:::{.column width="50%"}
APIs may require authentication

Usually this requires you to sign up to the provider and generate an API key

Read the API docs to see how to provide the key

Other methods, such as Auth0, are more complex
:::
:::{.column width="50%"}
```python
import requests

api_key = 'secret_API_key'

response = requests.get(
    'http://www.example.com/api',
    params={x: 5},
    headers={'api-key': api_key}
    )

if response.status_code == 200:
    print(response.json())
else:
    print(response.status_code)
```
:::
::::

## Pagination

::::{.columns}
:::{.column width="50%"}
If you're requesting lots of data, some APIs will serve one page of items at a time

You'll need to make multiple requests to get all of the data
:::
:::{.column width="50%"}
```python
import requests

result = []
response = requests.get('http://www.example.com/api')
data = response.json()
result.append(data['items'])

pages = data['pages']
for page in range(2, pages):
    response = requests.get(
        'http://www.example.com/api',
        params={'page': page})
    result.append(response.json()['items']

print(result)
```
:::
::::